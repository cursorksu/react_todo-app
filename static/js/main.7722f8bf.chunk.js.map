{"version":3,"sources":["components/SelectAll/SelectAll.js","components/Header/Header.js","components/EditField/EditField.js","components/TodoList/TodoList.js","components/Footer/Footer.js","App.js","index.js"],"names":["SelectAll","state","isChecked","handleChange","event","checked","target","setState","props","selectAll","this","isSelectedAll","onChange","type","id","className","htmlFor","Component","Header","inputValue","value","handleBlur","setNewTodo","action","onSubmit","onBlur","placeholder","PureComponent","EditField","todoTitle","handleKeyDown","keyCode","onClose","handleEditorChange","handleEditSubmit","preventDefault","onKeyDown","TodoList","editingValue","editingField","editing","handleEdit","editingId","editingText","handleEdited","setEditedValue","todos","onCompleted","onDestroy","map","text","completed","key","cx","data-index","onClick","data-btn-index","Footer","filterName","handleClick","dataset","name","filter","length","clear","data-name","selected","e","v4","substr","App","todoList","visibleTodos","todo","trim","prevState","handleCompleted","isCompleted","todoId","setFilteredList","handleDestroy","btnIndex","idx","handleSelectAll","clearCompleted","storageTodos","localStorage","getItem","JSON","parse","setItem","stringify","every","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7722f8bf.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './SelectAll.css';\n\nexport class SelectAll extends Component {\n  state = {\n    isChecked: false,\n  };\n\nhandleChange = (event) => {\n  const { checked } = event.target;\n\n  this.setState({\n    isChecked: checked,\n  });\n  this.props.selectAll(checked);\n};\n\nrender() {\n  const { isChecked } = this.state;\n  const { isSelectedAll } = this.props;\n\n  return (\n    <>\n      <input\n        checked={isSelectedAll}\n        onChange={this.handleChange}\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n      />\n      <label htmlFor=\"toggle-all\">\n        { isChecked\n          ? <span className=\"tooltip\">Mark all as not complete</span>\n          : <span className=\"tooltip\">Mark all as complete</span>\n        }\n      </label>\n    </>\n  );\n}\n}\n\nSelectAll.propTypes = {\n  selectAll: PropTypes.func.isRequired,\n  isSelectedAll: PropTypes.bool.isRequired,\n};\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { SelectAll } from '../SelectAll';\nimport './Header.css';\n\nexport class Header extends PureComponent {\n  state = {\n    inputValue: '',\n  };\n\nhandleChange = (event) => {\n  const { value } = event.target;\n\n  this.setState({\n    inputValue: value,\n  });\n};\n\nhandleBlur = () => {\n  this.props.setNewTodo(this.state.inputValue);\n\n  this.setState({\n    inputValue: '',\n  });\n};\n\nrender() {\n  const { inputValue } = this.state;\n  const { selectAll, isSelectedAll } = this.props;\n\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n      <form action=\"#\" onSubmit={this.handleBlur}>\n        <input\n          value={inputValue}\n          onBlur={this.handleBlur}\n          onChange={this.handleChange}\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n        />\n        <SelectAll selectAll={selectAll} isSelectedAll={isSelectedAll} />\n      </form>\n    </header>\n  );\n}\n}\n\nHeader.propTypes = {\n  setNewTodo: PropTypes.func.isRequired,\n  selectAll: PropTypes.func.isRequired,\n  isSelectedAll: PropTypes.bool.isRequired,\n};\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport './EditField.css';\n\nexport class EditField extends PureComponent {\n  state = {\n    todoTitle: this.props.value,\n  };\n\n  handleKeyDown = (event) => {\n    if (event.keyCode === 27) {\n      this.props.onClose(this.props.value);\n\n      this.setState({\n        todoTitle: this.props.value,\n      });\n    }\n  };\n\n  handleEditorChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      todoTitle: value,\n    });\n  };\n\n  handleEditSubmit = (event) => {\n    event.preventDefault();\n\n    const { todoTitle } = this.state;\n\n    this.props.onClose(todoTitle);\n  };\n\n  render() {\n    const { todoTitle } = this.state;\n\n    return (\n      <form action=\"#\" onSubmit={this.handleEditSubmit} className=\"edit-form\">\n        <input\n          type=\"text\"\n          value={todoTitle}\n          onBlur={this.handleEditSubmit}\n          onChange={this.handleEditorChange}\n          onKeyDown={this.handleKeyDown}\n          className=\"edit\"\n        />\n      </form>\n    );\n  }\n}\n\nEditField.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport * as cx from 'classnames';\nimport { EditField } from '../EditField';\nimport './TodoList.css';\n\nexport class TodoList extends PureComponent {\n  state = {\n    editingValue: '',\n    editingField: null,\n    editing: false,\n  };\n\n  handleEdit = (event, editingId, editingText) => {\n    this.setState({\n      editingValue: editingText,\n      editingField: editingId,\n      editing: true,\n    });\n  };\n\n  handleEdited = (value) => {\n    this.setState({\n      editingValue: value,\n      editing: false,\n    });\n\n    this.props.setEditedValue(this.state.editingValue, this.state.editingField);\n  };\n\n  render() {\n    const { editing, editingField, editingValue } = this.state;\n    const { todos, onCompleted, onDestroy } = this.props;\n\n    return (\n      <ul className=\"todo-list\">\n        {todos.map(({ text, id, completed }) => (\n          <li\n            key={id}\n            className={cx({\n              completed,\n              editing: editing && editingField === id,\n            })}\n          >\n            <form action=\"#\" className=\"view\">\n              <input\n                checked={completed}\n                onChange={onCompleted}\n                type=\"checkbox\"\n                className=\"toggle\"\n                id={id}\n                data-index={id}\n              />\n              <label\n                className=\"custom-cursor\"\n                htmlFor={id}\n              >\n                <span className=\"tooltip input-tooltip\">\n                  <button\n                    type=\"button\"\n                    onClick={event => this.handleEdit(event, id, text)}\n                    className=\"button-tooltip\"\n                  >\n                    Click for edit\n                  </button>\n                </span>\n                {text}\n              </label>\n              <button\n                data-btn-index={id}\n                type=\"button\"\n                className=\"destroy\"\n                onClick={onDestroy}\n              />\n            </form>\n            {(editingField === id)\n            && (\n              <EditField\n                value={editingValue}\n                onClose={value => this.handleEdited(value)}\n              />\n            )\n            }\n          </li>\n        ))\n        }\n      </ul>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape).isRequired,\n  setEditedValue: PropTypes.func.isRequired,\n  onCompleted: PropTypes.func.isRequired,\n  onDestroy: PropTypes.func.isRequired,\n};\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport * as cx from 'classnames';\nimport './Footer.css';\n\nexport class Footer extends PureComponent {\n  state = {\n    filterName: 'all',\n  };\n\n  handleClick =(event) => {\n    const filterName = event.target.dataset.name;\n    const { filter } = this.props;\n\n    filter(filterName);\n    this.setState({\n      filterName,\n    });\n  };\n\n  render() {\n    const { length, clear } = this.props;\n    const { filterName } = this.state;\n\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {`${length} items left`}\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <button\n              type=\"button\"\n              data-name=\"all\"\n              className={cx(\n                'filters-btn',\n                { selected: filterName === 'all' },\n              )}\n              onClick={this.handleClick}\n            >\n              All\n            </button>\n          </li>\n\n          <li>\n            <button\n              type=\"button\"\n              data-name=\"active\"\n              className={cx(\n                'filters-btn',\n                { selected: filterName === 'active' },\n              )}\n              onClick={this.handleClick}\n            >\n              Active\n            </button>\n          </li>\n\n          <li>\n            <button\n              type=\"button\"\n              data-name=\"completed\"\n              className={cx(\n                'filters-btn',\n                { selected: filterName === 'completed' },\n              )}\n              onClick={e => this.handleClick(e)}\n            >\n              Completed\n            </button>\n          </li>\n        </ul>\n\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={clear}\n        >\n          Clear completed\n        </button>\n      </footer>\n    );\n  }\n}\n\nFooter.propTypes = {\n  filter: PropTypes.func.isRequired,\n  clear: PropTypes.func.isRequired,\n  length: PropTypes.number.isRequired,\n};\n","import React, { PureComponent } from 'react';\nimport { v4 } from 'uuid';\nimport { Header } from './components/Header';\nimport { TodoList } from './components/TodoList';\nimport { Footer } from './components/Footer';\n\nconst todos = [\n  {\n    id: v4().substr(0, 4),\n    text: 'drink a coffee',\n    completed: false,\n  },\n  {\n    id: v4().substr(0, 4),\n    text: 'get the world masters',\n    completed: false,\n  },\n];\n\nexport class App extends PureComponent {\n  state = {\n    todoList: [...todos],\n    visibleTodos: [...todos],\n    filterName: 'all',\n  };\n\n  componentDidMount() {\n    const storageTodos = localStorage.getItem('todos')\n      && JSON.parse(localStorage.getItem('todos'));\n\n    if (storageTodos) {\n      this.setState({\n        todoList: [\n          ...storageTodos,\n        ],\n        visibleTodos: [\n          ...storageTodos,\n        ],\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('todos', JSON.stringify(this.state.todoList));\n  }\n\n  setNewTodo = (todo) => {\n    if (todo.trim()) {\n      this.setState(prevState => ({\n        todoList: [\n          ...prevState.todoList,\n          {\n            id: v4().substr(0, 4),\n            text: todo,\n            completed: false,\n          },\n        ],\n        visibleTodos: [\n          ...prevState.todoList,\n          {\n            id: v4().substr(0, 4),\n            text: todo,\n            completed: false,\n          },\n        ],\n      }));\n    }\n  };\n\n  handleCompleted = (event) => {\n    const isCompleted = event.target.checked;\n    const todoId = event.target.id;\n\n    this.setState(prevState => ({\n      todoList: [...prevState.todoList\n        .map((todo) => {\n          if (todoId === todo.id) {\n            return {\n              ...todo,\n              completed: isCompleted,\n            };\n          }\n\n          return todo;\n        })],\n    }));\n\n    this.setFilteredList(this.state.filterName);\n  };\n\n  handleDestroy = (event) => {\n    const todoId = event.target.dataset.btnIndex;\n\n    this.setState(prevState => ({\n      todoList: prevState.todoList\n        .filter(todo => todo.id !== todoId),\n    }));\n\n    this.setFilteredList(this.state.filterName);\n  };\n\n  setEditedValue = (value, idx) => {\n    if (value.trim()) {\n      this.setState(prevState => ({\n        todoList: prevState.todoList.map((todo, id) => {\n          if (todo.id === idx) {\n            return {\n              ...todo,\n              text: value,\n              completed: false,\n            };\n          }\n\n          return todo;\n        }),\n      }));\n    }\n\n    this.setFilteredList(this.state.filterName);\n  };\n\n  handleSelectAll = (isSelectedAll) => {\n    this.setState(prevState => ({\n      todoList: prevState.todoList\n        .map(todo => ({\n          ...todo,\n          completed: isSelectedAll,\n        })),\n      visibleTodos: prevState.todoList\n        .map(todo => ({\n          ...todo,\n          completed: isSelectedAll,\n        })),\n    }));\n  };\n\n  clearCompleted = () => {\n    this.setState(prevState => ({\n      todoList: prevState.todoList\n        .filter(todo => !todo.completed),\n    }));\n\n    this.setFilteredList(this.state.filterName);\n  };\n\n  setFilteredList = (name) => {\n    this.setState((prevState) => {\n      if (name === 'active') {\n        return {\n          filterName: 'active',\n          visibleTodos: prevState.todoList\n            .filter(todo => !todo.completed),\n        };\n      }\n\n      if (name === 'completed') {\n        return {\n          filterName: 'completed',\n          visibleTodos: prevState.todoList\n            .filter(todo => todo.completed),\n        };\n      }\n\n      return {\n        filterName: 'all',\n        visibleTodos: prevState.todoList,\n      };\n    });\n  };\n\n  render() {\n    const { visibleTodos } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <Header\n          setNewTodo={todo => this.setNewTodo(todo)}\n          selectAll={this.handleSelectAll}\n          isSelectedAll={visibleTodos.every(todo => todo.completed)}\n        />\n\n        <section className=\"main\">\n          <TodoList\n            setEditedValue={(value, id) => this.setEditedValue(value, id)}\n            todos={visibleTodos}\n            onCompleted={e => this.handleCompleted(e)}\n            onDestroy={event => this.handleDestroy(event)}\n          />\n        </section>\n\n        <Footer\n          clear={this.clearCompleted}\n          length={visibleTodos.length}\n          filter={name => this.setFilteredList(name)}\n        />\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}