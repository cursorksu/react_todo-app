{"version":3,"sources":["components/SelectAll/SelectAll.js","components/Header/Header.js","components/EditField/EditField.js","components/TodoList/TodoList.js","components/Footer/Footer.js","App.js","index.js"],"names":["SelectAll","state","isChecked","handleChange","event","checked","target","setState","props","selectAll","this","isSelectAll","onChange","type","id","className","htmlFor","Component","Header","inputValue","value","handleBlur","setNewTodo","action","onSubmit","onBlur","placeholder","PureComponent","EditField","editingValue","handleKeyDown","keyCode","onClose","handleEditorChange","handleEditSubmit","preventDefault","onKeyDown","TodoList","editingField","editing","handleEdit","editingId","editingText","handleEdited","setEditedValue","todos","onCompleted","onDestroy","map","text","completed","key","cx","data-index","onClick","data-btn-index","Footer","sorterName","handleClick","name","sort","length","clear","href","selected","e","App","v4","substr","todoList","visibleTodos","filterName","todo","trim","prevState","handleCompleted","isCompleted","todoId","setFilteredList","handleDestroy","dataset","btnIndex","filter","idx","handleSelectAll","clearCompleted","localStorage","getItem","JSON","parse","setItem","stringify","every","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.82f57d5c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './SelectAll.css';\n\nexport class SelectAll extends Component {\n  state = {\n    isChecked: false,\n  };\n\nhandleChange = (event) => {\n  const { checked } = event.target;\n\n  this.setState({\n    isChecked: checked,\n  });\n  this.props.selectAll(checked);\n};\n\nrender() {\n  const { isChecked } = this.state;\n  const { isSelectAll } = this.props;\n\n  return (\n    <>\n      <input\n        checked={isSelectAll}\n        onChange={this.handleChange}\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n      />\n      <label htmlFor=\"toggle-all\">\n        { isChecked\n          ? <span className=\"tooltip\">Mark all as not complete</span>\n          : <span className=\"tooltip\">Mark all as complete</span>\n        }\n      </label>\n    </>\n  );\n}\n}\n\nSelectAll.propTypes = {\n  selectAll: PropTypes.func.isRequired,\n  isSelectAll: PropTypes.bool.isRequired,\n};\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { SelectAll } from '../SelectAll';\nimport './Header.css';\n\nexport class Header extends PureComponent {\n  state = {\n    inputValue: '',\n  };\n\nhandleChange = (event) => {\n  const { value } = event.target;\n\n  this.setState({\n    inputValue: value,\n  });\n};\n\nhandleBlur = () => {\n  this.props.setNewTodo(this.state.inputValue);\n\n  this.setState({\n    inputValue: '',\n  });\n};\n\nrender() {\n  const { inputValue } = this.state;\n  const { selectAll, isSelectAll } = this.props;\n\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n      <form action=\"#\" onSubmit={this.handleBlur}>\n        <input\n          value={inputValue}\n          onBlur={this.handleBlur}\n          onChange={this.handleChange}\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n        />\n        <SelectAll selectAll={selectAll} isSelectAll={isSelectAll} />\n      </form>\n    </header>\n  );\n}\n}\n\nHeader.propTypes = {\n  setNewTodo: PropTypes.func.isRequired,\n  selectAll: PropTypes.func.isRequired,\n  isSelectAll: PropTypes.bool.isRequired,\n};\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport './EditField.css';\n\nexport class EditField extends PureComponent {\n  state = {\n    editingValue: this.props.value,\n  };\n\n  handleKeyDown = (event) => {\n    if (event.keyCode === 27) {\n      this.props.onClose(this.props.value);\n\n      this.setState({\n        editingValue: this.props.value,\n      });\n    }\n  };\n\n  handleEditorChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      editingValue: value,\n    });\n  };\n\n  handleEditSubmit = (event) => {\n    event.preventDefault();\n\n    const { editingValue } = this.state;\n\n    this.props.onClose(editingValue);\n  };\n\n  render() {\n    const { editingValue } = this.state;\n\n    return (\n      <form action=\"#\" onSubmit={this.handleEditSubmit} className=\"edit-form\">\n        <input\n          type=\"text\"\n          value={editingValue}\n          onBlur={this.handleEditSubmit}\n          onChange={this.handleEditorChange}\n          onKeyDown={this.handleKeyDown}\n          className=\"edit\"\n        />\n      </form>\n    );\n  }\n}\n\nEditField.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport * as cx from 'classnames';\nimport { EditField } from '../EditField';\nimport './TodoList.css';\n\nexport class TodoList extends PureComponent {\n  state = {\n    editingValue: '',\n    editingField: null,\n    editing: false,\n  };\n\n  handleEdit = (event, editingId, editingText) => {\n    this.setState({\n      editingValue: editingText,\n      editingField: editingId,\n      editing: true,\n    });\n  };\n\n  handleEdited = (value) => {\n    this.setState({\n      editingValue: value,\n      editing: false,\n    });\n\n    this.props.setEditedValue(this.state.editingValue, this.state.editingField);\n  };\n\n  render() {\n    const { editing, editingField, editingValue } = this.state;\n    const { todos, onCompleted, onDestroy } = this.props;\n\n    return (\n      <ul className=\"todo-list\">\n        {todos.map(({ text, id, completed }) => (\n          <li\n            key={id}\n            className={cx({\n              completed,\n              editing: editing && editingField === id,\n            })}\n          >\n            <form action=\"#\" className=\"view\">\n              <input\n                checked={completed}\n                onChange={onCompleted}\n                type=\"checkbox\"\n                className=\"toggle\"\n                id={id}\n                data-index={id}\n              />\n              <label\n                className=\"custom-cursor\"\n                htmlFor={id}\n              >\n                <span className=\"tooltip input-tooltip\">\n                  <button\n                    type=\"button\"\n                    onClick={event => this.handleEdit(event, id, text)}\n                    className=\"button-tooltip\"\n                  >\n                    Click for edit\n                  </button>\n                </span>\n                {text}\n              </label>\n              <button\n                data-btn-index={id}\n                type=\"button\"\n                className=\"destroy\"\n                onClick={onDestroy}\n              />\n            </form>\n            {(editingField === id)\n            && (\n              <EditField\n                value={editingValue}\n                onClose={value => this.handleEdited(value)}\n              />\n            )\n            }\n          </li>\n        ))\n        }\n      </ul>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape).isRequired,\n  setEditedValue: PropTypes.func.isRequired,\n  onCompleted: PropTypes.func.isRequired,\n  onDestroy: PropTypes.func.isRequired,\n};\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport * as cx from 'classnames';\nimport './Footer.css';\n\nexport class Footer extends PureComponent {\n  state = {\n    sorterName: 'all',\n  };\n\n  handleClick =(event) => {\n    const sorterName = event.target.name;\n\n    event.preventDefault();\n\n    const { sort } = this.props;\n\n    sort(sorterName);\n    this.setState({\n      sorterName,\n    });\n  };\n\n  render() {\n    const { length, clear } = this.props;\n    const { sorterName } = this.state;\n\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {`${length} items left`}\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a\n              href=\"#/\"\n              name=\"all\"\n              className={cx('', { selected: sorterName === 'all' })}\n              onClick={this.handleClick}\n            >\n              All\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/active\"\n              name=\"active\"\n              className={cx('', { selected: sorterName === 'active' })}\n              onClick={this.handleClick}\n            >\n              Active\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/completed\"\n              name=\"completed\"\n              className={cx('', { selected: sorterName === 'completed' })}\n              onClick={e => this.handleClick(e)}\n            >\n              Completed\n            </a>\n          </li>\n        </ul>\n\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={clear}\n        >\n          Clear completed\n        </button>\n      </footer>\n    );\n  }\n}\n\nFooter.propTypes = {\n  sort: PropTypes.func.isRequired,\n  clear: PropTypes.func.isRequired,\n  length: PropTypes.number.isRequired,\n};\n","import React, { PureComponent } from 'react';\nimport { v4 } from 'uuid';\nimport { Header } from './components/Header';\nimport { TodoList } from './components/TodoList';\nimport { Footer } from './components/Footer';\n\nexport class App extends PureComponent {\n  todos = [\n    {\n      id: v4().substr(0, 4),\n      text: 'drink a coffee',\n      completed: false,\n    },\n    {\n      id: v4().substr(0, 4),\n      text: 'get the world masters',\n      completed: false,\n    },\n  ];\n\n  state = {\n    todoList: [...this.todos],\n    visibleTodos: [...this.todos],\n    filterName: 'all',\n  };\n\n  componentDidMount() {\n    if (localStorage.getItem('todos')) {\n      this.setState({\n        todoList: [\n          ...JSON.parse(localStorage.getItem('todos')),\n        ],\n        visibleTodos: [\n          ...JSON.parse(localStorage.getItem('todos')),\n        ],\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('todos', JSON.stringify(this.state.todoList));\n  }\n\n  setNewTodo = (todo) => {\n    if (todo.trim()) {\n      this.setState(prevState => ({\n        todoList: [\n          ...prevState.todoList,\n          {\n            id: v4().substr(0, 4),\n            text: todo,\n            completed: false,\n          },\n        ],\n        visibleTodos: [\n          ...prevState.todoList,\n          {\n            id: v4().substr(0, 4),\n            text: todo,\n            completed: false,\n          },\n        ],\n      }));\n    }\n  };\n\n  handleCompleted = (event) => {\n    const isCompleted = event.target.checked;\n    const todoId = event.target.id;\n\n    this.setState(prevState => ({\n      todoList: [...prevState.todoList\n        .map((todo) => {\n          if (todoId === todo.id) {\n            return {\n              ...todo,\n              completed: isCompleted,\n            };\n          }\n\n          return todo;\n        })],\n    }));\n\n    this.setFilteredList(this.state.filterName);\n  };\n\n  handleDestroy = (event) => {\n    const todoId = event.target.dataset.btnIndex;\n\n    this.setState(prevState => ({\n      todoList: prevState.todoList\n        .filter(todo => todo.id !== todoId),\n    }));\n\n    this.setFilteredList(this.state.filterName);\n  };\n\n  setEditedValue = (value, idx) => {\n    if (value.trim()) {\n      this.setState(prevState => ({\n        todoList: prevState.todoList\n          .map((todo, id) => {\n            if (todo.id === idx) {\n              return {\n                ...todo,\n                text: value,\n                completed: false,\n              };\n            }\n\n            return todo;\n          }),\n      }));\n    }\n\n    this.setFilteredList(this.state.filterName);\n  };\n\n  handleSelectAll = (isSelectAll) => {\n    this.setState(prevState => ({\n      todoList: prevState.todoList\n        .map(todo => ({\n          ...todo,\n          completed: isSelectAll,\n        })),\n      visibleTodos: prevState.todoList\n        .map(todo => ({\n          ...todo,\n          completed: isSelectAll,\n        })),\n    }));\n  };\n\n  clearCompleted = () => {\n    this.setState(prevState => ({\n      todoList: prevState.todoList\n        .filter(todo => !todo.completed),\n    }));\n\n    this.setFilteredList(this.state.filterName);\n  };\n\n  setFilteredList = (name) => {\n    this.setState((prevState) => {\n      if (name === 'active') {\n        return {\n          filterName: 'active',\n          visibleTodos: prevState.todoList\n            .filter(todo => !todo.completed),\n        };\n      }\n\n      if (name === 'completed') {\n        return {\n          filterName: 'completed',\n          visibleTodos: prevState.todoList\n            .filter(todo => todo.completed),\n        };\n      }\n\n      return {\n        filterName: 'all',\n        visibleTodos: prevState.todoList,\n      };\n    });\n  };\n\n  render() {\n    const { visibleTodos } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <Header\n          setNewTodo={todo => this.setNewTodo(todo)}\n          selectAll={this.handleSelectAll}\n          isSelectAll={visibleTodos.every(todo => todo.completed)}\n        />\n\n        <section className=\"main\">\n          <TodoList\n            setEditedValue={(value, id) => this.setEditedValue(value, id)}\n            todos={visibleTodos}\n            onCompleted={e => this.handleCompleted(e)}\n            onDestroy={event => this.handleDestroy(event)}\n          />\n        </section>\n\n        <Footer\n          clear={this.clearCompleted}\n          length={visibleTodos.length}\n          sort={name => this.setFilteredList(name)}\n        />\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}